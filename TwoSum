Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

Solution:
    将出现过的数字用哈希保存，边遍历边看[target - 当前值]是否出现过，即可一遍遍历得出结果，时间和空间复杂度均为
    O(N).
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int>m;
        for (int i = 0; i < nums.size(); i++) {
            if (m[target - nums[i]]) {
                return vector<int> {m[target - nums[i]] - 1, i};
            } else {
                m[nums[i]] = i + 1;
            }
        }
        return vector<int> {0, 0};
    }
};
